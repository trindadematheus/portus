"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdatedesktop"]("main_window",{

/***/ "./src/components/DockerContainer/index.tsx":
/*!**************************************************!*\
  !*** ./src/components/DockerContainer/index.tsx ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ \"./node_modules/@babel/runtime/helpers/esm/slicedToArray.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"../../node_modules/.pnpm/react@18.0.0/node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _react_three_drei__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @react-three/drei */ \"../../node_modules/.pnpm/@react-three+drei@9.0.1_tynbetzobu5535th6wxw2e6u74/node_modules/@react-three/drei/core/Text.js\");\n/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @react-three/fiber */ \"../../node_modules/.pnpm/@react-three+fiber@8.0.11_l5xcbjfy74ndxsg7mnqlwl5f6y/node_modules/@react-three/fiber/dist/index-3c7aae97.esm.js\");\n/* harmony import */ var three_examples_jsm_loaders_BasisTextureLoader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three/examples/jsm/loaders/BasisTextureLoader */ \"../../node_modules/.pnpm/three@0.139.1/node_modules/three/examples/jsm/loaders/BasisTextureLoader.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react/jsx-runtime */ \"../../node_modules/.pnpm/react@18.0.0/node_modules/react/jsx-runtime.js\");\n\n\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\n\n\n\n\n\n\n\nfunction DockerContainer(props) {\n  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false),\n      _useState2 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_useState, 2),\n      clicked = _useState2[0],\n      click = _useState2[1];\n\n  var texture_1 = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_5__.z)(three_examples_jsm_loaders_BasisTextureLoader__WEBPACK_IMPORTED_MODULE_3__.BasisTextureLoader, './assets/blue-container.jpg');\n  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(react__WEBPACK_IMPORTED_MODULE_2__.Suspense, {\n      fallback: null,\n      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"mesh\", _objectSpread(_objectSpread({}, props), {}, {\n        scale: clicked ? 1.5 : 1,\n        onClick: function onClick() {\n          return click(!clicked);\n        } // onPointerOver={event => hover(true)}\n        // onPointerOut={event => hover(false)}\n        ,\n        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"boxGeometry\", {\n          args: [2, 1, 1]\n        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(react__WEBPACK_IMPORTED_MODULE_2__.Suspense, {\n          fallback: null,\n          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_react_three_drei__WEBPACK_IMPORTED_MODULE_6__.Text, {\n            color: '#EC2D2D',\n            fontSize: 0.1,\n            lineHeight: 1,\n            letterSpacing: 0.02,\n            textAlign: 'left',\n            font: \"https://fonts.gstatic.com/s/raleway/v14/1Ptrg8zYS_SKggPNwK4vaqI.woff\",\n            anchorX: \"center\",\n            anchorY: \"middle\",\n            depthOffset: 12,\n            position: [0, 0, 0.7],\n            children: props.container.Names[0]\n          })\n        })]\n      }))\n    })\n  });\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DockerContainer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9Eb2NrZXJDb250YWluZXIvaW5kZXgudHN4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFJQSxTQUFTSyxlQUFULENBQXlCQyxLQUF6QixFQUFxQztFQUNuQyxnQkFBeUJMLCtDQUFRLENBQUMsS0FBRCxDQUFqQztFQUFBO0VBQUEsSUFBT00sT0FBUDtFQUFBLElBQWdCQyxLQUFoQjs7RUFFQSxJQUFNQyxTQUFTLEdBQUdOLHFEQUFTLENBQUNDLDZGQUFELEVBQXFCLDZCQUFyQixDQUEzQjtFQUVBLG9CQUNFO0lBQUEsdUJBQ0UsdURBQUMsMkNBQUQ7TUFBVSxRQUFRLEVBQUUsSUFBcEI7TUFBQSx1QkFDRSxnR0FDTUUsS0FETjtRQUVFLEtBQUssRUFBRUMsT0FBTyxHQUFHLEdBQUgsR0FBUyxDQUZ6QjtRQUdFLE9BQU8sRUFBRTtVQUFBLE9BQU1DLEtBQUssQ0FBQyxDQUFDRCxPQUFGLENBQVg7UUFBQSxDQUhYLENBSUU7UUFDQTtRQUxGO1FBQUEsd0JBT0U7VUFBYSxJQUFJLEVBQUUsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVA7UUFBbkIsRUFQRixlQVNFLHVEQUFDLDJDQUFEO1VBQVUsUUFBUSxFQUFFLElBQXBCO1VBQUEsdUJBRUUsdURBQUMsbURBQUQ7WUFDRSxLQUFLLEVBQUUsU0FEVDtZQUVFLFFBQVEsRUFBRSxHQUZaO1lBR0UsVUFBVSxFQUFFLENBSGQ7WUFJRSxhQUFhLEVBQUUsSUFKakI7WUFLRSxTQUFTLEVBQUUsTUFMYjtZQU1FLElBQUksRUFBQyxzRUFOUDtZQU9FLE9BQU8sRUFBQyxRQVBWO1lBUUUsT0FBTyxFQUFDLFFBUlY7WUFTRSxXQUFXLEVBQUUsRUFUZjtZQVVFLFFBQVEsRUFBRSxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sR0FBUCxDQVZaO1lBQUEsVUFZR0QsS0FBSyxDQUFDSSxTQUFOLENBQWdCQyxLQUFoQixDQUFzQixDQUF0QjtVQVpIO1FBRkYsRUFURjtNQUFBO0lBREY7RUFERixFQURGO0FBaUNEOztBQUVELGlFQUFlTixlQUFmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGVza3RvcC8uL3NyYy9jb21wb25lbnRzL0RvY2tlckNvbnRhaW5lci9pbmRleC50c3g/NDNlZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdXNwZW5zZSwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IFRleHQgfSBmcm9tICdAcmVhY3QtdGhyZWUvZHJlaSdcbmltcG9ydCB7IHVzZUxvYWRlciB9IGZyb20gJ0ByZWFjdC10aHJlZS9maWJlcidcbmltcG9ydCB7IEJhc2lzVGV4dHVyZUxvYWRlciB9IGZyb20gJ3RocmVlL2V4YW1wbGVzL2pzbS9sb2FkZXJzL0Jhc2lzVGV4dHVyZUxvYWRlcidcblxuaW1wb3J0IGdldENvbnRhaW5lckNvbG9yIGZyb20gJy4uLy4uL3V0aWxzL2dldENvbnRhaW5lckNvbG9yJ1xuXG5mdW5jdGlvbiBEb2NrZXJDb250YWluZXIocHJvcHM6IGFueSkge1xuICBjb25zdCBbY2xpY2tlZCwgY2xpY2tdID0gdXNlU3RhdGUoZmFsc2UpXG5cbiAgY29uc3QgdGV4dHVyZV8xID0gdXNlTG9hZGVyKEJhc2lzVGV4dHVyZUxvYWRlciwgJy4vYXNzZXRzL2JsdWUtY29udGFpbmVyLmpwZycpXG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPFN1c3BlbnNlIGZhbGxiYWNrPXtudWxsfT5cbiAgICAgICAgPG1lc2hcbiAgICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgICAgc2NhbGU9e2NsaWNrZWQgPyAxLjUgOiAxfVxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGNsaWNrKCFjbGlja2VkKX1cbiAgICAgICAgICAvLyBvblBvaW50ZXJPdmVyPXtldmVudCA9PiBob3Zlcih0cnVlKX1cbiAgICAgICAgICAvLyBvblBvaW50ZXJPdXQ9e2V2ZW50ID0+IGhvdmVyKGZhbHNlKX1cbiAgICAgICAgPlxuICAgICAgICAgIDxib3hHZW9tZXRyeSBhcmdzPXtbMiwgMSwgMV19IC8+XG5cbiAgICAgICAgICA8U3VzcGVuc2UgZmFsbGJhY2s9e251bGx9PlxuICAgICAgICAgICAgey8qIEB0cy1pZ25vcmUgKi99XG4gICAgICAgICAgICA8VGV4dFxuICAgICAgICAgICAgICBjb2xvcj17JyNFQzJEMkQnfVxuICAgICAgICAgICAgICBmb250U2l6ZT17MC4xfVxuICAgICAgICAgICAgICBsaW5lSGVpZ2h0PXsxfVxuICAgICAgICAgICAgICBsZXR0ZXJTcGFjaW5nPXswLjAyfVxuICAgICAgICAgICAgICB0ZXh0QWxpZ249eydsZWZ0J31cbiAgICAgICAgICAgICAgZm9udD1cImh0dHBzOi8vZm9udHMuZ3N0YXRpYy5jb20vcy9yYWxld2F5L3YxNC8xUHRyZzh6WVNfU0tnZ1BOd0s0dmFxSS53b2ZmXCJcbiAgICAgICAgICAgICAgYW5jaG9yWD1cImNlbnRlclwiXG4gICAgICAgICAgICAgIGFuY2hvclk9XCJtaWRkbGVcIlxuICAgICAgICAgICAgICBkZXB0aE9mZnNldD17MTJ9XG4gICAgICAgICAgICAgIHBvc2l0aW9uPXtbMCwgMCwgMC43XX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge3Byb3BzLmNvbnRhaW5lci5OYW1lc1swXX1cbiAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICA8L1N1c3BlbnNlPlxuICAgICAgICA8L21lc2g+XG4gICAgICA8L1N1c3BlbnNlPlxuICAgIDwvPlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IERvY2tlckNvbnRhaW5lclxuIl0sIm5hbWVzIjpbIlN1c3BlbnNlIiwidXNlU3RhdGUiLCJUZXh0IiwidXNlTG9hZGVyIiwiQmFzaXNUZXh0dXJlTG9hZGVyIiwiRG9ja2VyQ29udGFpbmVyIiwicHJvcHMiLCJjbGlja2VkIiwiY2xpY2siLCJ0ZXh0dXJlXzEiLCJjb250YWluZXIiLCJOYW1lcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/components/DockerContainer/index.tsx\n");

/***/ }),

/***/ "../../node_modules/.pnpm/three@0.139.1/node_modules/three/examples/jsm/loaders/BasisTextureLoader.js":
/*!************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/three@0.139.1/node_modules/three/examples/jsm/loaders/BasisTextureLoader.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BasisTextureLoader\": () => (/* binding */ BasisTextureLoader)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"../../node_modules/.pnpm/three@0.139.1/node_modules/three/build/three.module.js\");\n\n\n/**\n * Loader for Basis Universal GPU Texture Codec.\n *\n * Basis Universal is a \"supercompressed\" GPU texture and texture video\n * compression system that outputs a highly compressed intermediate file format\n * (.basis) that can be quickly transcoded to a wide variety of GPU texture\n * compression formats.\n *\n * This loader parallelizes the transcoding process across a configurable number\n * of web workers, before transferring the transcoded compressed texture back\n * to the main thread.\n */\n\nconst _taskCache = new WeakMap();\n\nclass BasisTextureLoader extends three__WEBPACK_IMPORTED_MODULE_0__.Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.transcoderPath = '';\n\t\tthis.transcoderBinary = null;\n\t\tthis.transcoderPending = null;\n\n\t\tthis.workerLimit = 4;\n\t\tthis.workerPool = [];\n\t\tthis.workerNextTaskID = 1;\n\t\tthis.workerSourceURL = '';\n\t\tthis.workerConfig = null;\n\n\t\tconsole.warn(\n\n\t\t\t'THREE.BasisTextureLoader: This loader is deprecated, and will be removed in a future release. '\n\t\t\t+ 'Instead, use Basis Universal compression in KTX2 (.ktx2) files with THREE.KTX2Loader.'\n\n\t\t);\n\n\t}\n\n\tsetTranscoderPath( path ) {\n\n\t\tthis.transcoderPath = path;\n\n\t\treturn this;\n\n\t}\n\n\tsetWorkerLimit( workerLimit ) {\n\n\t\tthis.workerLimit = workerLimit;\n\n\t\treturn this;\n\n\t}\n\n\tdetectSupport( renderer ) {\n\n\t\tthis.workerConfig = {\n\t\t\tastcSupported: renderer.extensions.has( 'WEBGL_compressed_texture_astc' ),\n\t\t\tetc1Supported: renderer.extensions.has( 'WEBGL_compressed_texture_etc1' ),\n\t\t\tetc2Supported: renderer.extensions.has( 'WEBGL_compressed_texture_etc' ),\n\t\t\tdxtSupported: renderer.extensions.has( 'WEBGL_compressed_texture_s3tc' ),\n\t\t\tbptcSupported: renderer.extensions.has( 'EXT_texture_compression_bptc' ),\n\t\t\tpvrtcSupported: renderer.extensions.has( 'WEBGL_compressed_texture_pvrtc' )\n\t\t\t\t|| renderer.extensions.has( 'WEBKIT_WEBGL_compressed_texture_pvrtc' )\n\t\t};\n\n\t\treturn this;\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst loader = new three__WEBPACK_IMPORTED_MODULE_0__.FileLoader( this.manager );\n\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\tconst texture = new three__WEBPACK_IMPORTED_MODULE_0__.CompressedTexture();\n\n\t\tloader.load( url, ( buffer ) => {\n\n\t\t\t// Check for an existing task using this buffer. A transferred buffer cannot be transferred\n\t\t\t// again from this thread.\n\t\t\tif ( _taskCache.has( buffer ) ) {\n\n\t\t\t\tconst cachedTask = _taskCache.get( buffer );\n\n\t\t\t\treturn cachedTask.promise.then( onLoad ).catch( onError );\n\n\t\t\t}\n\n\t\t\tthis._createTexture( [ buffer ] )\n\t\t\t\t.then( function ( _texture ) {\n\n\t\t\t\t\ttexture.copy( _texture );\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t} )\n\t\t\t\t.catch( onError );\n\n\t\t}, onProgress, onError );\n\n\t\treturn texture;\n\n\t}\n\n\t/** Low-level transcoding API, exposed for use by KTX2Loader. */\n\tparseInternalAsync( options ) {\n\n\t\tconst { levels } = options;\n\n\t\tconst buffers = new Set();\n\n\t\tfor ( let i = 0; i < levels.length; i ++ ) {\n\n\t\t\tbuffers.add( levels[ i ].data.buffer );\n\n\t\t}\n\n\t\treturn this._createTexture( Array.from( buffers ), { ...options, lowLevel: true } );\n\n\t}\n\n\t/**\n\t * @param {ArrayBuffer[]} buffers\n\t * @param {object?} config\n\t * @return {Promise<CompressedTexture>}\n\t */\n\t_createTexture( buffers, config = {} ) {\n\n\t\tlet worker;\n\t\tlet taskID;\n\n\t\tconst taskConfig = config;\n\t\tlet taskCost = 0;\n\n\t\tfor ( let i = 0; i < buffers.length; i ++ ) {\n\n\t\t\ttaskCost += buffers[ i ].byteLength;\n\n\t\t}\n\n\t\tconst texturePending = this._allocateWorker( taskCost )\n\t\t\t.then( ( _worker ) => {\n\n\t\t\t\tworker = _worker;\n\t\t\t\ttaskID = this.workerNextTaskID ++;\n\n\t\t\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\t\t\tworker._callbacks[ taskID ] = { resolve, reject };\n\n\t\t\t\t\tworker.postMessage( { type: 'transcode', id: taskID, buffers: buffers, taskConfig: taskConfig }, buffers );\n\n\t\t\t\t} );\n\n\t\t\t} )\n\t\t\t.then( ( message ) => {\n\n\t\t\t\tconst { mipmaps, width, height, format } = message;\n\n\t\t\t\tconst texture = new three__WEBPACK_IMPORTED_MODULE_0__.CompressedTexture( mipmaps, width, height, format, three__WEBPACK_IMPORTED_MODULE_0__.UnsignedByteType );\n\t\t\t\ttexture.minFilter = mipmaps.length === 1 ? three__WEBPACK_IMPORTED_MODULE_0__.LinearFilter : three__WEBPACK_IMPORTED_MODULE_0__.LinearMipmapLinearFilter;\n\t\t\t\ttexture.magFilter = three__WEBPACK_IMPORTED_MODULE_0__.LinearFilter;\n\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\treturn texture;\n\n\t\t\t} );\n\n\t\t// Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\t\ttexturePending\n\t\t\t.catch( () => true )\n\t\t\t.then( () => {\n\n\t\t\t\tif ( worker && taskID ) {\n\n\t\t\t\t\tworker._taskLoad -= taskCost;\n\t\t\t\t\tdelete worker._callbacks[ taskID ];\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t// Cache the task result.\n\t\t_taskCache.set( buffers[ 0 ], { promise: texturePending } );\n\n\t\treturn texturePending;\n\n\t}\n\n\t_initTranscoder() {\n\n\t\tif ( ! this.transcoderPending ) {\n\n\t\t\t// Load transcoder wrapper.\n\t\t\tconst jsLoader = new three__WEBPACK_IMPORTED_MODULE_0__.FileLoader( this.manager );\n\t\t\tjsLoader.setPath( this.transcoderPath );\n\t\t\tjsLoader.setWithCredentials( this.withCredentials );\n\t\t\tconst jsContent = new Promise( ( resolve, reject ) => {\n\n\t\t\t\tjsLoader.load( 'basis_transcoder.js', resolve, undefined, reject );\n\n\t\t\t} );\n\n\t\t\t// Load transcoder WASM binary.\n\t\t\tconst binaryLoader = new three__WEBPACK_IMPORTED_MODULE_0__.FileLoader( this.manager );\n\t\t\tbinaryLoader.setPath( this.transcoderPath );\n\t\t\tbinaryLoader.setResponseType( 'arraybuffer' );\n\t\t\tbinaryLoader.setWithCredentials( this.withCredentials );\n\t\t\tconst binaryContent = new Promise( ( resolve, reject ) => {\n\n\t\t\t\tbinaryLoader.load( 'basis_transcoder.wasm', resolve, undefined, reject );\n\n\t\t\t} );\n\n\t\t\tthis.transcoderPending = Promise.all( [ jsContent, binaryContent ] )\n\t\t\t\t.then( ( [ jsContent, binaryContent ] ) => {\n\n\t\t\t\t\tconst fn = BasisTextureLoader.BasisWorker.toString();\n\n\t\t\t\t\tconst body = [\n\t\t\t\t\t\t'/* constants */',\n\t\t\t\t\t\t'let _EngineFormat = ' + JSON.stringify( BasisTextureLoader.EngineFormat ),\n\t\t\t\t\t\t'let _TranscoderFormat = ' + JSON.stringify( BasisTextureLoader.TranscoderFormat ),\n\t\t\t\t\t\t'let _BasisFormat = ' + JSON.stringify( BasisTextureLoader.BasisFormat ),\n\t\t\t\t\t\t'/* basis_transcoder.js */',\n\t\t\t\t\t\tjsContent,\n\t\t\t\t\t\t'/* worker */',\n\t\t\t\t\t\tfn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )\n\t\t\t\t\t].join( '\\n' );\n\n\t\t\t\t\tthis.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );\n\t\t\t\t\tthis.transcoderBinary = binaryContent;\n\n\t\t\t\t} );\n\n\t\t}\n\n\t\treturn this.transcoderPending;\n\n\t}\n\n\t_allocateWorker( taskCost ) {\n\n\t\treturn this._initTranscoder().then( () => {\n\n\t\t\tif ( this.workerPool.length < this.workerLimit ) {\n\n\t\t\t\tconst worker = new Worker( this.workerSourceURL );\n\n\t\t\t\tworker._callbacks = {};\n\t\t\t\tworker._taskLoad = 0;\n\n\t\t\t\tworker.postMessage( {\n\t\t\t\t\ttype: 'init',\n\t\t\t\t\tconfig: this.workerConfig,\n\t\t\t\t\ttranscoderBinary: this.transcoderBinary,\n\t\t\t\t} );\n\n\t\t\t\tworker.onmessage = function ( e ) {\n\n\t\t\t\t\tconst message = e.data;\n\n\t\t\t\t\tswitch ( message.type ) {\n\n\t\t\t\t\t\tcase 'transcode':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].resolve( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'error':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].reject( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.BasisTextureLoader: Unexpected message, \"' + message.type + '\"' );\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t\tthis.workerPool.push( worker );\n\n\t\t\t} else {\n\n\t\t\t\tthis.workerPool.sort( function ( a, b ) {\n\n\t\t\t\t\treturn a._taskLoad > b._taskLoad ? - 1 : 1;\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tconst worker = this.workerPool[ this.workerPool.length - 1 ];\n\n\t\t\tworker._taskLoad += taskCost;\n\n\t\t\treturn worker;\n\n\t\t} );\n\n\t}\n\n\tdispose() {\n\n\t\tfor ( let i = 0; i < this.workerPool.length; i ++ ) {\n\n\t\t\tthis.workerPool[ i ].terminate();\n\n\t\t}\n\n\t\tthis.workerPool.length = 0;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/* CONSTANTS */\n\nBasisTextureLoader.BasisFormat = {\n\tETC1S: 0,\n\tUASTC_4x4: 1,\n};\n\nBasisTextureLoader.TranscoderFormat = {\n\tETC1: 0,\n\tETC2: 1,\n\tBC1: 2,\n\tBC3: 3,\n\tBC4: 4,\n\tBC5: 5,\n\tBC7_M6_OPAQUE_ONLY: 6,\n\tBC7_M5: 7,\n\tPVRTC1_4_RGB: 8,\n\tPVRTC1_4_RGBA: 9,\n\tASTC_4x4: 10,\n\tATC_RGB: 11,\n\tATC_RGBA_INTERPOLATED_ALPHA: 12,\n\tRGBA32: 13,\n\tRGB565: 14,\n\tBGR565: 15,\n\tRGBA4444: 16,\n};\n\nBasisTextureLoader.EngineFormat = {\n\tRGBAFormat: three__WEBPACK_IMPORTED_MODULE_0__.RGBAFormat,\n\tRGBA_ASTC_4x4_Format: three__WEBPACK_IMPORTED_MODULE_0__.RGBA_ASTC_4x4_Format,\n\tRGBA_BPTC_Format: three__WEBPACK_IMPORTED_MODULE_0__.RGBA_BPTC_Format,\n\tRGBA_ETC2_EAC_Format: three__WEBPACK_IMPORTED_MODULE_0__.RGBA_ETC2_EAC_Format,\n\tRGBA_PVRTC_4BPPV1_Format: three__WEBPACK_IMPORTED_MODULE_0__.RGBA_PVRTC_4BPPV1_Format,\n\tRGBA_S3TC_DXT5_Format: three__WEBPACK_IMPORTED_MODULE_0__.RGBA_S3TC_DXT5_Format,\n\tRGB_ETC1_Format: three__WEBPACK_IMPORTED_MODULE_0__.RGB_ETC1_Format,\n\tRGB_ETC2_Format: three__WEBPACK_IMPORTED_MODULE_0__.RGB_ETC2_Format,\n\tRGB_PVRTC_4BPPV1_Format: three__WEBPACK_IMPORTED_MODULE_0__.RGB_PVRTC_4BPPV1_Format,\n\tRGB_S3TC_DXT1_Format: three__WEBPACK_IMPORTED_MODULE_0__.RGB_S3TC_DXT1_Format,\n};\n\n\n/* WEB WORKER */\n\nBasisTextureLoader.BasisWorker = function () {\n\n\tlet config;\n\tlet transcoderPending;\n\tlet BasisModule;\n\n\tconst EngineFormat = _EngineFormat; // eslint-disable-line no-undef\n\tconst TranscoderFormat = _TranscoderFormat; // eslint-disable-line no-undef\n\tconst BasisFormat = _BasisFormat; // eslint-disable-line no-undef\n\n\tonmessage = function ( e ) {\n\n\t\tconst message = e.data;\n\n\t\tswitch ( message.type ) {\n\n\t\t\tcase 'init':\n\t\t\t\tconfig = message.config;\n\t\t\t\tinit( message.transcoderBinary );\n\t\t\t\tbreak;\n\n\t\t\tcase 'transcode':\n\t\t\t\ttranscoderPending.then( () => {\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tconst { width, height, hasAlpha, mipmaps, format } = message.taskConfig.lowLevel\n\t\t\t\t\t\t\t? transcodeLowLevel( message.taskConfig )\n\t\t\t\t\t\t\t: transcode( message.buffers[ 0 ] );\n\n\t\t\t\t\t\tconst buffers = [];\n\n\t\t\t\t\t\tfor ( let i = 0; i < mipmaps.length; ++ i ) {\n\n\t\t\t\t\t\t\tbuffers.push( mipmaps[ i ].data.buffer );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tself.postMessage( { type: 'transcode', id: message.id, width, height, hasAlpha, mipmaps, format }, buffers );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tconsole.error( error );\n\n\t\t\t\t\t\tself.postMessage( { type: 'error', id: message.id, error: error.message } );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t};\n\n\tfunction init( wasmBinary ) {\n\n\t\ttranscoderPending = new Promise( ( resolve ) => {\n\n\t\t\tBasisModule = { wasmBinary, onRuntimeInitialized: resolve };\n\t\t\tBASIS( BasisModule ); // eslint-disable-line no-undef\n\n\t\t} ).then( () => {\n\n\t\t\tBasisModule.initializeBasis();\n\n\t\t} );\n\n\t}\n\n\tfunction transcodeLowLevel( taskConfig ) {\n\n\t\tconst { basisFormat, width, height, hasAlpha } = taskConfig;\n\n\t\tconst { transcoderFormat, engineFormat } = getTranscoderFormat( basisFormat, width, height, hasAlpha );\n\n\t\tconst blockByteLength = BasisModule.getBytesPerBlockOrPixel( transcoderFormat );\n\n\t\tassert( BasisModule.isFormatSupported( transcoderFormat ), 'THREE.BasisTextureLoader: Unsupported format.' );\n\n\t\tconst mipmaps = [];\n\n\t\tif ( basisFormat === BasisFormat.ETC1S ) {\n\n\t\t\tconst transcoder = new BasisModule.LowLevelETC1SImageTranscoder();\n\n\t\t\tconst { endpointCount, endpointsData, selectorCount, selectorsData, tablesData } = taskConfig.globalData;\n\n\t\t\ttry {\n\n\t\t\t\tlet ok;\n\n\t\t\t\tok = transcoder.decodePalettes( endpointCount, endpointsData, selectorCount, selectorsData );\n\n\t\t\t\tassert( ok, 'THREE.BasisTextureLoader: decodePalettes() failed.' );\n\n\t\t\t\tok = transcoder.decodeTables( tablesData );\n\n\t\t\t\tassert( ok, 'THREE.BasisTextureLoader: decodeTables() failed.' );\n\n\t\t\t\tfor ( let i = 0; i < taskConfig.levels.length; i ++ ) {\n\n\t\t\t\t\tconst level = taskConfig.levels[ i ];\n\t\t\t\t\tconst imageDesc = taskConfig.globalData.imageDescs[ i ];\n\n\t\t\t\t\tconst dstByteLength = getTranscodedImageByteLength( transcoderFormat, level.width, level.height );\n\t\t\t\t\tconst dst = new Uint8Array( dstByteLength );\n\n\t\t\t\t\tok = transcoder.transcodeImage(\n\t\t\t\t\t\ttranscoderFormat,\n\t\t\t\t\t\tdst, dstByteLength / blockByteLength,\n\t\t\t\t\t\tlevel.data,\n\t\t\t\t\t\tgetWidthInBlocks( transcoderFormat, level.width ),\n\t\t\t\t\t\tgetHeightInBlocks( transcoderFormat, level.height ),\n\t\t\t\t\t\tlevel.width, level.height, level.index,\n\t\t\t\t\t\timageDesc.rgbSliceByteOffset, imageDesc.rgbSliceByteLength,\n\t\t\t\t\t\timageDesc.alphaSliceByteOffset, imageDesc.alphaSliceByteLength,\n\t\t\t\t\t\timageDesc.imageFlags,\n\t\t\t\t\t\thasAlpha,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t0, 0\n\t\t\t\t\t);\n\n\t\t\t\t\tassert( ok, 'THREE.BasisTextureLoader: transcodeImage() failed for level ' + level.index + '.' );\n\n\t\t\t\t\tmipmaps.push( { data: dst, width: level.width, height: level.height } );\n\n\t\t\t\t}\n\n\t\t\t} finally {\n\n\t\t\t\ttranscoder.delete();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tfor ( let i = 0; i < taskConfig.levels.length; i ++ ) {\n\n\t\t\t\tconst level = taskConfig.levels[ i ];\n\n\t\t\t\tconst dstByteLength = getTranscodedImageByteLength( transcoderFormat, level.width, level.height );\n\t\t\t\tconst dst = new Uint8Array( dstByteLength );\n\n\t\t\t\tconst ok = BasisModule.transcodeUASTCImage(\n\t\t\t\t\ttranscoderFormat,\n\t\t\t\t\tdst, dstByteLength / blockByteLength,\n\t\t\t\t\tlevel.data,\n\t\t\t\t\tgetWidthInBlocks( transcoderFormat, level.width ),\n\t\t\t\t\tgetHeightInBlocks( transcoderFormat, level.height ),\n\t\t\t\t\tlevel.width, level.height, level.index,\n\t\t\t\t\t0,\n\t\t\t\t\tlevel.data.byteLength,\n\t\t\t\t\t0,\n\t\t\t\t\thasAlpha,\n\t\t\t\t\tfalse,\n\t\t\t\t\t0, 0,\n\t\t\t\t\t- 1, - 1\n\t\t\t\t);\n\n\t\t\t\tassert( ok, 'THREE.BasisTextureLoader: transcodeUASTCImage() failed for level ' + level.index + '.' );\n\n\t\t\t\tmipmaps.push( { data: dst, width: level.width, height: level.height } );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn { width, height, hasAlpha, mipmaps, format: engineFormat };\n\n\t}\n\n\tfunction transcode( buffer ) {\n\n\t\tconst basisFile = new BasisModule.BasisFile( new Uint8Array( buffer ) );\n\n\t\tconst basisFormat = basisFile.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n\t\tconst width = basisFile.getImageWidth( 0, 0 );\n\t\tconst height = basisFile.getImageHeight( 0, 0 );\n\t\tconst levels = basisFile.getNumLevels( 0 );\n\t\tconst hasAlpha = basisFile.getHasAlpha();\n\n\t\tfunction cleanup() {\n\n\t\t\tbasisFile.close();\n\t\t\tbasisFile.delete();\n\n\t\t}\n\n\t\tconst { transcoderFormat, engineFormat } = getTranscoderFormat( basisFormat, width, height, hasAlpha );\n\n\t\tif ( ! width || ! height || ! levels ) {\n\n\t\t\tcleanup();\n\t\t\tthrow new Error( 'THREE.BasisTextureLoader:\tInvalid texture' );\n\n\t\t}\n\n\t\tif ( ! basisFile.startTranscoding() ) {\n\n\t\t\tcleanup();\n\t\t\tthrow new Error( 'THREE.BasisTextureLoader: .startTranscoding failed' );\n\n\t\t}\n\n\t\tconst mipmaps = [];\n\n\t\tfor ( let mip = 0; mip < levels; mip ++ ) {\n\n\t\t\tconst mipWidth = basisFile.getImageWidth( 0, mip );\n\t\t\tconst mipHeight = basisFile.getImageHeight( 0, mip );\n\t\t\tconst dst = new Uint8Array( basisFile.getImageTranscodedSizeInBytes( 0, mip, transcoderFormat ) );\n\n\t\t\tconst status = basisFile.transcodeImage(\n\t\t\t\tdst,\n\t\t\t\t0,\n\t\t\t\tmip,\n\t\t\t\ttranscoderFormat,\n\t\t\t\t0,\n\t\t\t\thasAlpha\n\t\t\t);\n\n\t\t\tif ( ! status ) {\n\n\t\t\t\tcleanup();\n\t\t\t\tthrow new Error( 'THREE.BasisTextureLoader: .transcodeImage failed.' );\n\n\t\t\t}\n\n\t\t\tmipmaps.push( { data: dst, width: mipWidth, height: mipHeight } );\n\n\t\t}\n\n\t\tcleanup();\n\n\t\treturn { width, height, hasAlpha, mipmaps, format: engineFormat };\n\n\t}\n\n\t//\n\n\t// Optimal choice of a transcoder target format depends on the Basis format (ETC1S or UASTC),\n\t// device capabilities, and texture dimensions. The list below ranks the formats separately\n\t// for ETC1S and UASTC.\n\t//\n\t// In some cases, transcoding UASTC to RGBA32 might be preferred for higher quality (at\n\t// significant memory cost) compared to ETC1/2, BC1/3, and PVRTC. The transcoder currently\n\t// chooses RGBA32 only as a last resort and does not expose that option to the caller.\n\tconst FORMAT_OPTIONS = [\n\t\t{\n\t\t\tif: 'astcSupported',\n\t\t\tbasisFormat: [ BasisFormat.UASTC_4x4 ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4 ],\n\t\t\tengineFormat: [ EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format ],\n\t\t\tpriorityETC1S: Infinity,\n\t\t\tpriorityUASTC: 1,\n\t\t\tneedsPowerOfTwo: false,\n\t\t},\n\t\t{\n\t\t\tif: 'bptcSupported',\n\t\t\tbasisFormat: [ BasisFormat.ETC1S, BasisFormat.UASTC_4x4 ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5 ],\n\t\t\tengineFormat: [ EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format ],\n\t\t\tpriorityETC1S: 3,\n\t\t\tpriorityUASTC: 2,\n\t\t\tneedsPowerOfTwo: false,\n\t\t},\n\t\t{\n\t\t\tif: 'dxtSupported',\n\t\t\tbasisFormat: [ BasisFormat.ETC1S, BasisFormat.UASTC_4x4 ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.BC1, TranscoderFormat.BC3 ],\n\t\t\tengineFormat: [ EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format ],\n\t\t\tpriorityETC1S: 4,\n\t\t\tpriorityUASTC: 5,\n\t\t\tneedsPowerOfTwo: false,\n\t\t},\n\t\t{\n\t\t\tif: 'etc2Supported',\n\t\t\tbasisFormat: [ BasisFormat.ETC1S, BasisFormat.UASTC_4x4 ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.ETC1, TranscoderFormat.ETC2 ],\n\t\t\tengineFormat: [ EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format ],\n\t\t\tpriorityETC1S: 1,\n\t\t\tpriorityUASTC: 3,\n\t\t\tneedsPowerOfTwo: false,\n\t\t},\n\t\t{\n\t\t\tif: 'etc1Supported',\n\t\t\tbasisFormat: [ BasisFormat.ETC1S, BasisFormat.UASTC_4x4 ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.ETC1, TranscoderFormat.ETC1 ],\n\t\t\tengineFormat: [ EngineFormat.RGB_ETC1_Format, EngineFormat.RGB_ETC1_Format ],\n\t\t\tpriorityETC1S: 2,\n\t\t\tpriorityUASTC: 4,\n\t\t\tneedsPowerOfTwo: false,\n\t\t},\n\t\t{\n\t\t\tif: 'pvrtcSupported',\n\t\t\tbasisFormat: [ BasisFormat.ETC1S, BasisFormat.UASTC_4x4 ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA ],\n\t\t\tengineFormat: [ EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format ],\n\t\t\tpriorityETC1S: 5,\n\t\t\tpriorityUASTC: 6,\n\t\t\tneedsPowerOfTwo: true,\n\t\t},\n\t];\n\n\tconst ETC1S_OPTIONS = FORMAT_OPTIONS.sort( function ( a, b ) {\n\n\t\treturn a.priorityETC1S - b.priorityETC1S;\n\n\t} );\n\tconst UASTC_OPTIONS = FORMAT_OPTIONS.sort( function ( a, b ) {\n\n\t\treturn a.priorityUASTC - b.priorityUASTC;\n\n\t} );\n\n\tfunction getTranscoderFormat( basisFormat, width, height, hasAlpha ) {\n\n\t\tlet transcoderFormat;\n\t\tlet engineFormat;\n\n\t\tconst options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n\n\t\tfor ( let i = 0; i < options.length; i ++ ) {\n\n\t\t\tconst opt = options[ i ];\n\n\t\t\tif ( ! config[ opt.if ] ) continue;\n\t\t\tif ( ! opt.basisFormat.includes( basisFormat ) ) continue;\n\t\t\tif ( opt.needsPowerOfTwo && ! ( isPowerOfTwo( width ) && isPowerOfTwo( height ) ) ) continue;\n\n\t\t\ttranscoderFormat = opt.transcoderFormat[ hasAlpha ? 1 : 0 ];\n\t\t\tengineFormat = opt.engineFormat[ hasAlpha ? 1 : 0 ];\n\n\t\t\treturn { transcoderFormat, engineFormat };\n\n\t\t}\n\n\t\tconsole.warn( 'THREE.BasisTextureLoader: No suitable compressed texture format found. Decoding to RGBA32.' );\n\n\t\ttranscoderFormat = TranscoderFormat.RGBA32;\n\t\tengineFormat = EngineFormat.RGBAFormat;\n\n\t\treturn { transcoderFormat, engineFormat };\n\n\t}\n\n\tfunction assert( ok, message ) {\n\n\t\tif ( ! ok ) throw new Error( message );\n\n\t}\n\n\tfunction getWidthInBlocks( transcoderFormat, width ) {\n\n\t\treturn Math.ceil( width / BasisModule.getFormatBlockWidth( transcoderFormat ) );\n\n\t}\n\n\tfunction getHeightInBlocks( transcoderFormat, height ) {\n\n\t\treturn Math.ceil( height / BasisModule.getFormatBlockHeight( transcoderFormat ) );\n\n\t}\n\n\tfunction getTranscodedImageByteLength( transcoderFormat, width, height ) {\n\n\t\tconst blockByteLength = BasisModule.getBytesPerBlockOrPixel( transcoderFormat );\n\n\t\tif ( BasisModule.formatIsUncompressed( transcoderFormat ) ) {\n\n\t\t\treturn width * height * blockByteLength;\n\n\t\t}\n\n\t\tif ( transcoderFormat === TranscoderFormat.PVRTC1_4_RGB\n\t\t\t\t|| transcoderFormat === TranscoderFormat.PVRTC1_4_RGBA ) {\n\n\t\t\t// GL requires extra padding for very small textures:\n\t\t\t// https://www.khronos.org/registry/OpenGL/extensions/IMG/IMG_texture_compression_pvrtc.txt\n\t\t\tconst paddedWidth = ( width + 3 ) & ~ 3;\n\t\t\tconst paddedHeight = ( height + 3 ) & ~ 3;\n\n\t\t\treturn ( Math.max( 8, paddedWidth ) * Math.max( 8, paddedHeight ) * 4 + 7 ) / 8;\n\n\t\t}\n\n\t\treturn ( getWidthInBlocks( transcoderFormat, width )\n\t\t\t* getHeightInBlocks( transcoderFormat, height )\n\t\t\t* blockByteLength );\n\n\t}\n\n\tfunction isPowerOfTwo( value ) {\n\n\t\tif ( value <= 2 ) return true;\n\n\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n\t}\n\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/.pnpm/three@0.139.1/node_modules/three/examples/jsm/loaders/BasisTextureLoader.js\n");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("351f459ad07324d0ab99")
/******/ })();
/******/ 
/******/ /* webpack/runtime/compat */
/******/ 
/******/ if (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = "/home/trindadematheus/workspace/portus/apps/desktop/.webpack/renderer" + "/native_modules/";
/******/ 
/******/ }
);